#! /bin/bash

BASE=git-subundle

die_usage()
{
    >&2 echo "Usage: $BASE [create [--all] DIRECTORY|unbundle BUNDLE]."
    die "$@"
}

die()
{
    CODE=$1
    shift
    >&2 echo "$BASE: ERROR -- $@"
    exit $CODE
}

try()
{
    >&2 echo "#### Trying '$@'"
    "$@"

}

function do_reset()
{
    DIR="$1"

    [ -d "$DIR" ] || die 1 "Directory '$DIR' not found."

    for d in $(find "$DIR" -name ".git"); do
        GIT_DIR=${d%%/.git}
        echo "Reseting repository '$GIT_DIR'..."
        try git -C "$GIT_DIR" tag -d bundle bundlehead
    done
}

function do_create()
{
    DIR="$1"
    if [ "$DIR" == "--all" ]; then
        ALL=true
        shift
        DIR="$1"
    fi

    [ -d "$DIR" ] || die 1 "Directory '$DIR' not found."

    for d in $(find "$DIR" -name ".git"); do
        GIT_DIR=${d%%/.git}
        echo "Bundling repository '$GIT_DIR'..."
        BUNDLE_FILE="${PWD}/${GIT_DIR////_}.bundle"

        pushd "$GIT_DIR"

        branch="$(git symbolic-ref HEAD 2>/dev/null)" || branch="HEAD"
        branch=${branch##refs/heads/}
        escapedbranch=${branch////\\/}
        echo "... bundling from branch '$branch'."
        if git show-ref bundle &> /dev/null; then
            # Reference 'bundle' exists
            echo "Reference 'bundle' found."
            try git branch -f bundlehead
            if [ -n "$ALL" ]; then
                try git bundle create "${BUNDLE_FILE}" --all bundle..
            else
                try git bundle create "${BUNDLE_FILE}" bundle..$branch $(git show-ref --heads --head|cut -d' ' -f2|sed -r "/^(refs\/heads\/)?$escapedbranch$/d" | sed -r "s/^/bundle../")
            fi
            try git branch -D bundlehead
        else
            try git branch -f bundlehead
            if [ -n "$ALL" ]; then
                try git bundle create "${BUNDLE_FILE}" --all
            else
                try git bundle create "${BUNDLE_FILE}" $branch $(git show-ref --heads --head|cut -d' ' -f2|sed -r "/^(refs\/heads\/)?$escapedbranch$/d")
            fi
            try git branch -D bundlehead
        fi
        try git tag -f bundle HEAD
        popd
    done
}

function do_unbundle()
{
    BUNDLE_BASE="$1"
    DEST="$2"

    [ -n "$BUNDLE_BASE" ] || die_usage 1 "Missing BUNDLE"
    [ -n "$DEST" ] || DEST=$BUNDLE_BASE

    echo "Unbundling to '$DEST'..."

    for BUNDLE_FILE in $PWD/${BUNDLE_BASE}.bundle; do
        [ -e "$BUNDLE_FILE" ] || continue
        FOUND=true
        GIT_DIR="$PWD/$DEST"

        branch="$(git bundle list-heads $BUNDLE_FILE | head -n 1| cut -d' ' -f2)" || branch="HEAD"
        branch=${branch##refs/heads/}

        echo "Bundle file '$BUNDLE_FILE'"
        echo "  -> directory '$GIT_DIR'"
        echo "  -> branch '$branch'"
        if [ -d "$GIT_DIR" ]; then
            if ! git -C "$GIT_DIR" | grep -q "^bundle$"; then
                try git -C "$GIT_DIR" remote add bundle "$BUNDLE_FILE"
            fi
            try git -C "$GIT_DIR" fetch --recurse-submodules=no bundle
            try git -C "$GIT_DIR" bundle unbundle "$BUNDLE_FILE"        # Fetch does not fetch detached HEAD
        else
            try git clone -b $branch "$BUNDLE_FILE" -o bundle $GIT_DIR
        fi

        for br in $(try git -C "$GIT_DIR" branch --all --no-color | grep '^\s*remotes' | egrep -v 'remotes/bundle/HEAD|->'); do
            try git -C "$GIT_DIR" branch -f --track "${br##remotes/bundle/}" "$br"
        done
    done

    for BUNDLE_FILE in $PWD/${BUNDLE_BASE}_*.bundle; do
        [ -e "$BUNDLE_FILE" ] || continue
        FOUND=true
        GIT_DIR="${BUNDLE_FILE//_//}"
        GIT_DIR="${GIT_DIR%%.bundle}"
        MODULE=$(basename ${GIT_DIR})
        PARENT_GIT_DIR="$PWD/$DEST"
        MODULE_DIR=$PARENT_GIT_DIR/$MODULE
        branch="$(git bundle list-heads $BUNDLE_FILE | head -n 1 | cut -d' ' -f2)" || branch="HEAD"
        branch=${branch##refs/heads/}
        echo "Bundle file '$BUNDLE_FILE'"
        echo "  -> directory '$MODULE_DIR'"
        echo "  -> module '$MODULE'"
        echo "  -> branch '$branch'"

        pushd "$PARENT_GIT_DIR"

        if [ -e "$MODULE/.git" ]; then
            if ! git -C "$GIT_DIR" | grep -q "^bundle$"; then
                try git -C "$GIT_DIR" remote add bundle "$BUNDLE_FILE"
            fi
            try git -C "$MODULE" fetch bundle
            try git -C "$MODULE" bundle unbundle "$BUNDLE_FILE"           # Fetch does not fetch detached HEAD
        else
            try git submodule init "$MODULE"
            try git config submodule."$MODULE".url $BUNDLE_FILE
            try git submodule update "$MODULE"
            try git -C "$MODULE" remote rename origin bundle
        fi

        for br in $(try git -C "$MODULE_DIR" branch --all --no-color | grep '^\s*remotes' | egrep -v 'remotes/bundle/HEAD|->'); do
            try git -C "$MODULE_DIR" branch -f --track "${br##remotes/bundle/}" "$br"
        done

        popd
    done

    [ -n "$FOUND" ] || die 1 "No bundle file found."

}


ACTION="$1"
shift
case "$ACTION" in
    "reset")
        do_reset "$@"
        ;;
    "create")
        do_create "$@"
        ;;
    "unbundle")
        do_unbundle "$@"
        ;;
    *)
        die_usage 1 "Missing ACTION"
        ;;
esac
