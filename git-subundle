#! /bin/bash

BASE="git subundle"

die_usage()
{
    >&2 echo "Usage: \n$SYNOPSYS"
    die "$@"
}

die()
{
    CODE=$1
    shift
    >&2 echo "$BASE: ERROR -- $@"
    exit $CODE
}

try()
{
    >&2 echo "#### Trying '$@'"
    "$@"

}

function do_reset()
{
    DIR="$1"

    [ -d "$DIR" ] || die 1 "Directory '$DIR' not found."

    for d in $(find "$DIR" -name ".git"); do
        GIT_DIR=${d%%/.git}
        echo "Reseting repository '$GIT_DIR'..."
        try git -C "$GIT_DIR" tag -d bundle bundlehead
    done
}

function do_create()
{
    DIR="$1"
    [ -d "$DIR" ] || die 1 "Directory '$DIR' not found."

    for d in $(find "$DIR" -name ".git"); do
        GIT_DIR=${d%%/.git}
        echo "Bundling repository '$GIT_DIR'..."
        BUNDLE_FILE="${PWD}/${GIT_DIR////_}.bundle"

        pushd "$GIT_DIR"
        try git bundle create "${BUNDLE_FILE}" --all $(git show-ref|grep " refs/remotes/bundle"|cut -d" " -f2|sed -r 's/$/../') |& sed -r '/^warning: .*is excluded by/d'
        popd
    done
}

function do_unbundle_helper()
{
    BUNDLE_FILE="$1"
    [ -e "$BUNDLE_FILE" ] || return 1
    GIT_DIR="$2"
    [ -n "$GIT_DIR" ] || die 1 "Missing git directory."
    echo "Bundle file '$BUNDLE_FILE'"
    echo "  -> directory '$GIT_DIR'"
    MODULE_GIT_DIR="$3"
    [ -z "$MODULE_GIT_DIR" ] || echo "  -> module directory '$MODULE_GIT_DIR'"

    branch="$(git bundle list-heads $BUNDLE_FILE | head -n 1| cut -d' ' -f2)" || branch="HEAD"
    branch=${branch##refs/heads/}
    echo "  -> branch '$branch'"

    if [ -n "$MODULE_GIT_DIR" ]; then
        MODULE=$(basename ${MODULE_GIT_DIR})

        if [ -e "$MODULE_GIT_DIR/.git" ]; then
            pushd "$MODULE_GIT_DIR"
            if ! git remote | grep -q "^bundle$"; then
                try git remote add bundle "$BUNDLE_FILE"
            else
                # Remote bundle found. Make sure URL points to our BUNDLE_FILE
                if ! git remote -v | egrep -q "^bundle[[:space:]]+$BUNDLE_FILE"; then
                    die 1 "Remote 'bundle' exists but has the wrong URL. Aborting."
                fi
            fi
            try git -c fetch.prune=false fetch bundle
            try git bundle unbundle "$BUNDLE_FILE"           # Fetch does not fetch detached HEAD
            popd
        else
            try git -C "$GIT_DIR" submodule init "$MODULE"
            try git -C "$GIT_DIR" config submodule."$MODULE".url $BUNDLE_FILE
            try git -C "$GIT_DIR" submodule update "$MODULE"

            pushd "$MODULE_GIT_DIR"
            try git remote rename origin bundle
            try git bundle unbundle "$BUNDLE_FILE"           # Fetch does not fetch detached HEAD
            popd
        fi

    else
        if [ -d "$GIT_DIR" ]; then
            pushd "$GIT_DIR"

            if ! git remote | grep -q "^bundle$"; then
                # Remote bundle not found. Create one.
                try git remote add bundle "$BUNDLE_FILE"
            else
                # Remote bundle found. Make sure URL points to our BUNDLE_FILE
                if ! git remote -v | egrep -q "^bundle[[:space:]]+$BUNDLE_FILE"; then
                    die 1 "Remote 'bundle' exists but has the wrong URL."
                fi
            fi
            try git -c fetch.prune=false fetch --recurse-submodules=no bundle
            try git bundle unbundle "$BUNDLE_FILE"        # Fetch does not fetch detached HEAD

            popd
        else
            try git clone -b $branch "$BUNDLE_FILE" -o bundle $GIT_DIR
        fi
    fi

    return 0
}

function do_unbundle()
{
    BUNDLE_BASE="$1"
    [ -n "$BUNDLE_BASE" ] || die_usage 1 "Missing BUNDLE"
    DEST="$2"
    [ -n "$DEST" ] || DEST=$BUNDLE_BASE
    echo "Unbundling to '$DEST'..."

    GIT_DIR="$PWD/$DEST"

    do_unbundle_helper "$PWD/${BUNDLE_BASE}.bundle" "$GIT_DIR" && FOUND=true
    for BUNDLE_FILE in $PWD/${BUNDLE_BASE}_*.bundle; do
        MODULE_GIT_DIR="${BUNDLE_FILE//_//}"
        MODULE_GIT_DIR="${MODULE_GIT_DIR%%.bundle}"
        do_unbundle_helper "$BUNDLE_FILE" "$GIT_DIR" "$MODULE_GIT_DIR" && FOUND=true
    done

    [ -n "$FOUND" ] || die 1 "No bundle file found."
}

usage_help() {
# 34567890123456789012345678901234567890123456789012345678901234567890123456789| No char under and beyond | !
    cat <<- __END__
NAME
        $BASE - Create bundle including submodules.

SYNOPSYS
        $SYNOPSYS

DESCRIPTION
        Create bundle 'BUNDLE_FILE.bundle' that contains also submodules.

        -b <name>
                Use <name> as bundle remote name. If omitted, the default
                remote name is 'bundle'.

        -h
                Print this help.

SEE ALSO
        git-bundle(1).
__END__
}

SYNOPSYS="$BASE [-h] [-b <name>] create REPOSITORY\n"
SYNOPSYS="$BASE [-h] [-b <name>] unbundle BUNDLE_FILE [REPOSITORY]\n"
SYNOPSYS="$BASE [-h] [-b <name>] reset REPOSITORY"

getOptions() {
    BUNDLE_REMOTE=
    while getopts "hb:" flag
    do
        case $flag in 
            b) BUNDLE_REMOTE=$OPTARG
                ;;
            h) usage_help
                exit 0
                ;;
        esac
    done
}

BASEDIR=$(cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd )

### Parse options
getOptions "$@"
shift $((OPTIND-1))
ACTION=$1
shift

echo "BUNDLE_REMOTE is '$BUNDLE_REMOTE'"
case "$ACTION" in
    "reset")
        do_reset "$@"
        ;;
    "create")
        do_create "$@"
        ;;
    "unbundle")
        do_unbundle "$@"
        ;;
    *)
        die_usage 1 "Missing ACTION"
        ;;
esac
